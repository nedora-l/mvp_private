"use client";
import { useState } from "react";

// Types pour les notifications
interface NotificationOptions {
  type: 'email' | 'slack' | 'teams' | 'webhook';
  recipient: string;
  subject?: string;
  message: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  taskId?: number;
  projectId?: number;
  userId?: string;
}

interface IntegrationStatus {
  slack: boolean;
  email: boolean;
  jira: boolean;
  timestamp: string;
}

export function useNotifications() {
  const [loading, setLoading] = useState(false);
  const [status, setStatus] = useState<IntegrationStatus | null>(null);

  // Envoyer une notification
  const sendNotification = async (options: NotificationOptions): Promise<boolean> => {
    setLoading(true);
    try {
      console.log("üì® Envoi notification:", options);
      
      // ‚úÖ Utiliser l'API MCP pour les notifications (√† impl√©menter)
      console.log("‚ÑπÔ∏è Notifications temporairement d√©sactiv√©es (API MCP en d√©veloppement)");
      
      // Simuler le succ√®s pour maintenir la compatibilit√©
      return true;
    } catch (error) {
      console.error("‚ùå Erreur notification:", error);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Tester les connexions
  const checkIntegrationsStatus = async (): Promise<IntegrationStatus | null> => {
    try {
      // ‚úÖ D√©sactiv√© temporairement - API MCP √† impl√©menter
      console.log("‚ÑπÔ∏è Status int√©grations temporairement d√©sactiv√© (API MCP en d√©veloppement)");
      
      const mockStatus: IntegrationStatus = {
        slack: false,
        email: false,
        jira: true, // Jira est connect√© via MCP
        timestamp: new Date().toISOString()
      };
      
      setStatus(mockStatus);
      return mockStatus;
    } catch (error) {
      console.error("‚ùå Erreur status int√©grations:", error);
      return null;
    }
  };

  // Notifications pr√©d√©finies pour les t√¢ches
  const notifyTaskCreated = async (task: any, project: any, assignee?: any) => {
    const notifications = [];

    // Email √† l'assign√©
    if (assignee?.email) {
      notifications.push(sendNotification({
        type: 'email',
        recipient: assignee.email,
        subject: `üÜï Nouvelle t√¢che assign√©e: ${task.title}`,
        message: `
          <h3>Nouvelle t√¢che assign√©e dans ${project.name}</h3>
          <p><strong>Titre:</strong> ${task.title}</p>
          <p><strong>Description:</strong> ${task.description || 'Aucune description'}</p>
          <p><strong>Priorit√©:</strong> ${task.priority}</p>
          <p><strong>Date d'√©ch√©ance:</strong> ${task.dueDate || 'Non d√©finie'}</p>
          <p>Connectez-vous √† D&A Workspace pour plus de d√©tails.</p>
        `,
        priority: task.priority === 'Critique' ? 'critical' : 
                 task.priority === '√âlev√©e' ? 'high' : 'medium',
        taskId: task.id,
        projectId: project.id
      }));
    }

    // Slack pour les projets connect√©s
    if (project.type === 'Slack' || project.type === 'Jira') {
      notifications.push(sendNotification({
        type: 'slack',
        recipient: `#${project.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,
        subject: `üÜï Nouvelle t√¢che: ${task.title}`,
        message: `
*Nouvelle t√¢che cr√©√©e*
üìù *Titre:* ${task.title}
üë§ *Assign√© √†:* ${assignee?.name || 'Non assign√©'}
‚ö° *Priorit√©:* ${task.priority}
üìÖ *√âch√©ance:* ${task.dueDate || 'Non d√©finie'}
üéØ *Projet:* ${project.name}
        `,
        priority: 'medium',
        taskId: task.id,
        projectId: project.id
      }));
    }

    return Promise.all(notifications);
  };

  const notifyTaskUpdated = async (task: any, project: any, changes: string[], assignee?: any) => {
    const notifications = [];

    // Email √† l'assign√©
    if (assignee?.email) {
      notifications.push(sendNotification({
        type: 'email',
        recipient: assignee.email,
        subject: `üîÑ T√¢che mise √† jour: ${task.title}`,
        message: `
          <h3>T√¢che mise √† jour dans ${project.name}</h3>
          <p><strong>Titre:</strong> ${task.title}</p>
          <p><strong>Modifications:</strong> ${changes.join(', ')}</p>
          <p><strong>Nouveau statut:</strong> ${task.status}</p>
          <p><strong>Priorit√©:</strong> ${task.priority}</p>
          <p>Connectez-vous √† D&A Workspace pour voir les d√©tails.</p>
        `,
        priority: 'medium',
        taskId: task.id,
        projectId: project.id
      }));
    }

    return Promise.all(notifications);
  };

  const notifyTaskCompleted = async (task: any, project: any, assignee?: any) => {
    const notifications = [];

    // Email de f√©licitations
    if (assignee?.email) {
      notifications.push(sendNotification({
        type: 'email',
        recipient: assignee.email,
        subject: `üéâ T√¢che termin√©e: ${task.title}`,
        message: `
          <h3>üéâ F√©licitations ! T√¢che termin√©e</h3>
          <p><strong>Titre:</strong> ${task.title}</p>
          <p><strong>Projet:</strong> ${project.name}</p>
          <p><strong>Termin√©e le:</strong> ${new Date().toLocaleDateString('fr-FR')}</p>
          <p>Excellent travail ! üöÄ</p>
        `,
        priority: 'low',
        taskId: task.id,
        projectId: project.id
      }));
    }

    // Slack c√©l√©bration
    if (project.type === 'Slack') {
      notifications.push(sendNotification({
        type: 'slack',
        recipient: `#${project.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,
        message: `
üéâ *T√¢che termin√©e !*
‚úÖ *${task.title}*
üëè F√©licitations √† *${assignee?.name || 'l\'√©quipe'}* !
üéØ Projet: ${project.name}
        `,
        priority: 'low',
        taskId: task.id,
        projectId: project.id
      }));
    }

    return Promise.all(notifications);
  };

  const notifyOverdueTasks = async (overdueTasks: any[], project: any) => {
    // Notification des t√¢ches en retard (√† automatiser avec un cron job)
    for (const task of overdueTasks) {
      await sendNotification({
        type: 'email',
        recipient: task.assignee?.email || 'manager@company.com',
        subject: `‚ö†Ô∏è T√¢che en retard: ${task.title}`,
        message: `
          <h3>‚ö†Ô∏è Attention: T√¢che en retard</h3>
          <p><strong>Titre:</strong> ${task.title}</p>
          <p><strong>Date d'√©ch√©ance:</strong> ${task.dueDate}</p>
          <p><strong>Retard de:</strong> ${Math.ceil((Date.now() - new Date(task.dueDate).getTime()) / (1000 * 60 * 60 * 24))} jours</p>
          <p>Merci de traiter cette t√¢che en priorit√©.</p>
        `,
        priority: 'high',
        taskId: task.id,
        projectId: project.id
      });
    }
  };

  return {
    loading,
    status,
    sendNotification,
    checkIntegrationsStatus,
    // Notifications pr√©d√©finies
    notifyTaskCreated,
    notifyTaskUpdated, 
    notifyTaskCompleted,
    notifyOverdueTasks
  };
}
